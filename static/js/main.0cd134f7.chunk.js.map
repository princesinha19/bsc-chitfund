{"version":3,"sources":["assets/logo.png","assets/bsc.svg","assets/metamask.png","components/Utils/history.js","components/Utils/AlertModal.js","utils/config.js","utils/init.js","components/Header/index.js","components/Utils/Loading.js","components/Utils/SuccessModal.js","utils/precision.js","utils/time.js","components/Bid/index.js","components/Participate/index.js","components/ViewPool/index.js","components/CreatePool/index.js","components/HomePage/index.js","components/TokenFaucet/index.js","App.js","index.js"],"names":["module","exports","createHistory","require","createHashHistory","AlertModal","open","toggle","children","Modal","show","onHide","animation","Header","closeButton","Title","Body","Footer","Button","variant","onClick","config","networkId","poolFactoryAbi","poolFactoryAddress","tokenFaucetAbi","tokenFaucetAddress","initContract","a","window","web3","Web3","ethereum","enable","request","method","accounts","userAddress","poolFactory","eth","Contract","from","tokenFaucet","ethInitialized","on","location","reload","useState","errorModal","setErrorModal","isMetamaskInstalled","Navbar","collapseOnSelect","bg","Brand","href","Image","width","src","logo","Toggle","aria-controls","Nav","className","Link","style","cursor","metamask","Loading","height","type","color","SuccessModal","onConfirm","precision","add","value","decimals","String","Decimal","times","pow","remove","Number","dividedBy","currentUnixTime","Math","floor","Date","getTime","time","unixTimestamp","tempTime","toISOString","replace","index","indexOf","substring","future","distance","Bid","contractInstance","totalAmount","token","callback","bidAmount","setBidAmount","msg","successModal","setSuccessModal","bidding","setBidding","handleBid","methods","bid","send","catch","error","message","Card","backgroundColor","Row","Col","textAlign","fontWeight","Form","Control","placeholder","onChange","e","target","Participate","poolAddress","bep20Instance","buyToken","availableBalance","balanaceNeeded","approving","setApproving","processing","setProcessing","handleParticipate","allowance","call","participate","approveToken","Promise","resolve","reject","approve","marginBottom","paddingBottom","ViewPool","useParams","loading","setLoading","setBep20Instance","setContractInstance","maxBidAmount","minBidAmount","poolStartTimestamp","isParticipant","alreadyTakenLoan","loanAmount","depositAmount","totalParticipants","auctionCount","autionStartTimestamp","autionCloseTimestamp","auctionInterval","poolCloseTimestamp","highestBidAmount","isLoanWinner","winnerInAuction","userCurrentBid","claimedFinalYield","bep20Balance","createdAt","state","setState","claimingLoan","setClaimingLoan","claimingYield","setClaimingYield","showBid","setShowBid","showParticipate","setShowParticipate","showMetamaskError","setShowMetamaskError","handleClaimLoan","claimLoan","fetchContractData","handleClaimFinalYield","claimFinalYield","createContractInstance","result","contract","bep20","takenLoan","getAuctionCount","nextAutionStartTimestamp","nextAutionCloseTimestamp","checkWinnerStatus","loanStatus","balanceOf","minimumBidAmount","maxParticipants","poolAbi","bep20Abi","useEffect","isConnected","selectedAddress","history","push","CardDeck","marginTop","role","aria-label","CreatePool","maximumBidAmount","auctionDuration","addPoolState","setAddPoolState","pool","lendingPool","paddingLeft","disabled","step","required","min","max","DropdownButton","position","title","map","element","onSelect","key","Dropdown","Item","eventKey","addPool","_","console","log","HomePage","loanPools","setlLoanPools","noMetamsk","setNoMetamask","createSubArray","pools","chunks","length","splice","getPools","totalPools","poolCount","i","availablePools","poolInfo","DisplayCard","count","textDecoration","to","bscLogo","marginRight","fontSize","margin","k","Array","x","TokenFaucet","name","address","status","tokens","forEach","isAlreadyClaimed","rel","lineHeight","claimTestTokens","App","routes","path","exact","then","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.0cd134f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b7f124e8.png\";","module.exports = __webpack_public_path__ + \"static/media/bsc.d8e9b0e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/metamask.e9ada72b.png\";","const createHistory = require(\"history\").createHashHistory;\n\nexport default createHistory();\n","import React from \"react\";\nimport {\n    Button,\n    Modal,\n} from \"react-bootstrap\";\n\nexport default function AlertModal({\n    open,\n    toggle,\n    children,\n}) {\n    return (\n        <Modal\n            show={open}\n            onHide={toggle}\n            animation={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Opps!! Error...</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{children}</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\"\n                    onClick={toggle}\n                >\n                    Ok\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import * as poolFactory from '../abis/poolFactory.json';\nimport * as tokenFaucet from '../abis/tokenFaucet.json';\n\nexport const config = {\n    networkId: 97,\n    poolFactoryAbi: poolFactory.default,\n    poolFactoryAddress: \"0xaD524FbAFe042543613576713886b807AEb41270\",\n    tokenFaucetAbi: tokenFaucet.default,\n    tokenFaucetAddress: \"0x58A77d051EAf555C236680048c8E34F4aC71698D\",\n}\n","import Web3 from 'web3';\nimport { config } from './config';\n\n// Initialize contract & set global variables\nexport async function initContract() {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n\n    const accounts = await window.ethereum\n        .request({ method: 'eth_accounts' });\n\n    window.userAddress = accounts[0];\n\n    window.poolFactory = new window.web3.eth.Contract(\n        config.poolFactoryAbi,\n        config.poolFactoryAddress,\n        { from: window.userAddress }\n    );\n\n    window.tokenFaucet = new window.web3.eth.Contract(\n        config.tokenFaucetAbi,\n        config.tokenFaucetAddress,\n        { from: window.userAddress }\n    );\n\n    window.ethInitialized = true;\n\n    window.ethereum.on('accountsChanged', () => {\n        window.location.reload();\n    });\n\n    window.ethereum.on('chainChanged', () => {\n        window.location.reload();\n    });\n};\n","import React, { useState } from \"react\";\nimport {\n    Nav,\n    Navbar,\n    Image,\n} from \"react-bootstrap\";\nimport logo from \"../../assets/logo.png\"\nimport metamask from \"../../assets/metamask.png\"\nimport AlertModal from \"../Utils/AlertModal\";\nimport { initContract } from \"../../utils/init\";\n\nexport default function Header() {\n    const [errorModal, setErrorModal] = useState(false);\n\n    const handleConnectMetamask = () => {\n        if (isMetamaskInstalled()) {\n            initContract();\n        } else {\n            setErrorModal(true);\n        }\n    };\n\n    const isMetamaskInstalled = () => {\n        return (typeof window.ethereum !== 'undefined');\n    }\n\n    return (\n        <div>\n            <Navbar collapseOnSelect bg=\"light\" variant=\"light\">\n                <Navbar.Brand href=\"#\">\n                    <Image width=\"70px\" src={logo} />\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#create-pool\">Create Pool</Nav.Link>\n                    <Nav.Link href=\"#token-faucet\">Token Faucet</Nav.Link>\n                </Nav>\n                <Nav>\n                    <Image\n                        style={{ cursor: \"pointer\" }}\n                        width=\"60px\"\n                        src={metamask}\n                        onClick={handleConnectMetamask}\n                    />\n                </Nav>\n            </Navbar>\n\n            <AlertModal\n                open={errorModal}\n                toggle={() => setErrorModal(false)}\n            >\n                You can't use these features without Metamask.\n                <br />\n                Please install\n                <Image width=\"50px\" src={metamask}></Image>\n                first !!\n            </AlertModal>\n        </div>\n    )\n}\n","import React from \"react\";\n\nimport ReactLoading from \"react-loading\";\n\nexport default function Loading() {\n    return (\n        <div\n            className=\"d-flex justify-content-center mt-5 g-pt-90\"\n            style={{ height: \"-webkit-fill-available\"}}\n        >\n            <ReactLoading\n                type={\"spin\"}\n                color={\"#343a40\"}\n                height={\"6%\"}\n                width={\"6%\"}\n            />\n        </div>\n    );\n}\n","import React from \"react\";\nimport {\n    Button,\n    Modal,\n} from \"react-bootstrap\";\n\nexport default function SuccessModal({\n    open,\n    toggle,\n    children,\n    onConfirm,\n}) {\n    const handleClick = () => {\n        toggle();\n        if (onConfirm) {\n            onConfirm();\n        }\n    };\n\n    return (\n        <Modal\n            show={open}\n            onHide={toggle}\n            animation={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Notification</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{children}</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"success\"\n                    onClick={handleClick}\n                >\n                    Ok\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import { Decimal } from \"decimal.js\";\n\nconst add = async (value, decimals) => {\n    return String(await new Decimal(value)\n        .times(new Decimal(10).pow(decimals)));\n}\n\nconst remove = async (value, decimals) => {\n    return Number(await new Decimal(value)\n        .dividedBy(new Decimal(10).pow(decimals)));\n}\n\nexport const precision = {\n    add,\n    remove,\n};\n","const currentUnixTime = () => {\n    return Math.floor((new Date()).getTime() / 1000);\n}\n\nconst getTimeInString = (unixTimestamp) => {\n    const tempTime = new Date(unixTimestamp * 1000)\n        .toISOString()\n        .replace('Z', ' ')\n        .replace('T', ' ');\n\n    const index = tempTime.indexOf('.');\n\n    return tempTime.substring(0, index) + ' UTC';\n}\n\nconst getRemaingTime = (future) => {\n    const distance = Number(future) - currentUnixTime();\n\n    const days = Math.floor(distance / (60 * 60 * 24));\n    const hours = Math.floor((distance % (60 * 60 * 24)) / (60 * 60));\n    const minutes = Math.floor((distance % (60 * 60)) / (60));\n    const seconds = Math.floor((distance % (60)));\n\n    return days + \"d \" + hours + \"h \" + minutes + \"m \" + seconds + \"s\";\n};\n\nexport const time = {\n    currentUnixTime,\n    getTimeInString,\n    getRemaingTime,\n};\n","import React, { useState } from \"react\";\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport {\n    Row,\n    Col,\n    Form,\n    Button,\n    Card,\n} from \"react-bootstrap\";\n\nexport default function Bid({\n    contractInstance,\n    totalAmount,\n    token,\n    callback\n}) {\n    const [bidAmount, setBidAmount] = useState(\"\");\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [bidding, setBidding] = useState(false);\n\n    const handleBid = async () => {\n        contractInstance.methods.bid(bidAmount)\n            .send()\n            .on('transactionHash', () => {\n                setBidding(true);\n            })\n            .on('receipt', () => {\n                setBidding(false);\n                setSuccessModal({\n                    open: true,\n                    msg: \"Congratulations 🎉 !! \" +\n                        \"You have successfully made your bid !!\",\n                });\n                callback();\n            })\n            .catch((error) => {\n                setBidding(false);\n                setErrorModal({\n                    open: true,\n                    msg: error.message,\n                });\n            });\n    }\n\n    return (\n        <div>\n            <Card\n                className=\"mx-auto participate-card text-center\"\n                style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n            >\n                <Card.Body>\n                    <Row>\n                        <Col>\n                            <p className=\"bid-header-text\">\n                                <u>Make Your Bid</u>\n                            </p>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\n                            Bid Amount:\n                        </Col>\n                        <Col>\n                            <Form.Control\n                                className=\"mb-4\"\n                                type=\"number\"\n                                placeholder=\"Amount\"\n                                onChange={\n                                    (e) => setBidAmount(e.target.value)\n                                }\n                                style={{ width: \"60%\" }}\n                                value={bidAmount}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"auction-message\">\n                            You will receive loan of {totalAmount - bidAmount} {token}\n                        </Col>\n                    </Row>\n                    <Row className=\"text-center\">\n                        <Col>\n                            <Button\n                                onClick={handleBid}\n                                variant=\"outline-success\"\n                            >\n                                {bidding ?\n                                    <div className=\"d-flex align-items-center\">\n                                        Processing\n                            <span className=\"loading ml-2\"></span>\n                                    </div>\n                                    :\n                                    <div> Submit</div>\n                                }\n                            </Button>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={callback}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport { precision } from \"../../utils/precision\";\nimport { Row, Col, Button, Card } from \"react-bootstrap\";\n\nexport default function Participate({\n    poolAddress,\n    contractInstance,\n    bep20Instance,\n    buyToken,\n    availableBalance,\n    balanaceNeeded,\n    callback,\n}) {\n    const [approving, setApproving] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const handleParticipate = async () => {\n        try {\n            const allowance = await precision.remove(\n                await bep20Instance.methods.allowance(\n                    window.userAddress,\n                    poolAddress,\n                ).call(),\n                18\n            );\n\n            if (Number(allowance) >= Number(balanaceNeeded)) {\n                participate();\n            } else {\n                const success = await approveToken(allowance);\n                if (success) {\n                    participate();\n                }\n            }\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const participate = () => {\n        return new Promise((resolve, reject) => {\n            contractInstance.methods.participate()\n                .send()\n                .on('transactionHash', () => {\n                    setProcessing(true);\n                })\n                .on('receipt', () => {\n                    setProcessing(false);\n                    setSuccessModal({\n                        open: true,\n                        msg: \"Congratulations 🎉 !! \" +\n                            \"You have successfully deposited your token !!\",\n                    });\n                })\n                .catch((error) => {\n                    setProcessing(false);\n                    reject(error);\n                });\n        });\n    }\n\n    const approveToken = (allowance) => {\n        return new Promise(async (resolve, reject) => {\n            bep20Instance.methods.approve\n                (\n                    poolAddress,\n                    await precision.add(\n                        Number(balanaceNeeded) - Number(allowance),\n                        18\n                    )\n                )\n                .send()\n                .on('transactionHash', () => {\n                    setApproving(true);\n                })\n                .on('receipt', () => {\n                    setApproving(false);\n                    resolve(true);\n                })\n                .catch((error) => {\n                    setApproving(false);\n                    reject(error);\n                })\n        });\n    }\n\n    return (\n        <div>\n            <Card\n                className=\"mx-auto participate-card text-center\"\n                style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n            >\n                <Card.Header>\n                    <u>Participation Form</u>\n                </Card.Header>\n\n                <Card.Body>\n                    <div style={{ marginBottom: \"20px\", color: \"orange\" }}>\n                        You are about to particpate in the pool.\n                        Please click submit button to confirm your participation.\n                        </div>\n\n                    <Row className=\"text-center\" style={{ paddingBottom: \"20px\" }}>\n                        <Col>\n                            <u>Available Balance</u>\n                            <span> : </span>\n                            <span>{availableBalance} {buyToken}</span>\n                        </Col>\n                    </Row>\n\n                    <Row className=\"text-center\" style={{ paddingBottom: \"30px\" }}>\n                        <Col>\n                            <u>Balance Needed</u>\n                            <span> : </span>\n                            <span>{balanaceNeeded} {buyToken}</span>\n                        </Col>\n                    </Row>\n\n                    <Row className=\"text-center\">\n                        <Col>\n                            <Button\n                                onClick={handleParticipate}\n                                variant=\"outline-success\"\n                            >\n                                {approving ?\n                                    <div className=\"d-flex align-items-center\">\n                                        Approving\n                                        <span className=\"loading ml-2\"></span>\n                                    </div>\n                                    :\n                                    (processing ?\n                                        <div className=\"d-flex align-items-center\">\n                                            Processing\n                                        <span className=\"loading ml-2\"></span>\n                                        </div>\n                                        :\n                                        <div>Submit</div>\n                                    )\n                                }\n                            </Button>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={callback}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div >\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport history from \"../Utils/history\";\nimport Loading from \"../Utils/Loading\";\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport metamask from \"../../assets/metamask.png\";\nimport { precision } from \"../../utils/precision\";\nimport { time } from \"../../utils/time\";\nimport * as poolAbi from \"../../abis/pool.json\";\nimport * as bep20Abi from \"../../abis/bep20Abi.json\"\nimport Bid from \"../Bid\";\nimport {\n    Card,\n    Row,\n    Col,\n    Image,\n    Button,\n    CardDeck\n} from \"react-bootstrap\";\nimport Participate from \"../Participate\";\n\nexport default function ViewPool() {\n    let routes;\n    const BUSD = \"0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47\";\n    const { poolAddress } = useParams();\n    const [loading, setLoading] = useState(true);\n    let [bep20Instance, setBep20Instance] = useState();\n    let [contractInstance, setContractInstance] = useState();\n    const [state, setState] = useState({\n        maxBidAmount: 0,\n        minBidAmount: 0,\n        poolStartTimestamp: 0,\n        isParticipant: false,\n        alreadyTakenLoan: false,\n        loanAmount: 0,\n        depositAmount: 0,\n        totalParticipants: 0,\n        auctionCount: 0,\n        autionStartTimestamp: 0,\n        autionCloseTimestamp: 0,\n        auctionInterval: 0,\n        poolCloseTimestamp: 0,\n        highestBidAmount: 0,\n        isLoanWinner: false,\n        winnerInAuction: 0,\n        userCurrentBid: 0,\n        claimedFinalYield: false,\n        bep20Balance: 0,\n        createdAt: 0,\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [claimingLoan, setClaimingLoan] = useState(false);\n    const [claimingYield, setClaimingYield] = useState(false);\n    const [showBid, setShowBid] = useState(false);\n    const [showParticipate, setShowParticipate] = useState(false);\n    const [showMetamaskError, setShowMetamaskError] = useState(false);\n\n    const handleClaimLoan = async () => {\n        contractInstance.methods.claimLoan()\n            .send()\n            .on('transactionHash', () => {\n                setClaimingLoan(true);\n            })\n            .on('receipt', () => {\n                setClaimingLoan(false);\n                fetchContractData();\n                setSuccessModal({\n                    open: true,\n                    msg: \"Congratulations 🎉 !! \" +\n                        \"You received loan amount in your wallet !!\",\n                });\n            })\n            .catch((error) => {\n                setClaimingLoan(false);\n                setErrorModal({\n                    open: true,\n                    // onConfirm={handleReload}\n                    msg: error.message,\n                });\n            });\n    }\n\n    const handleClaimFinalYield = async () => {\n        contractInstance.methods.claimFinalYield()\n            .send()\n            .on('transactionHash', () => {\n                setClaimingYield(true);\n            })\n            .on('receipt', () => {\n                setClaimingYield(false);\n                fetchContractData();\n                setSuccessModal({\n                    open: true,\n                    msg: \"Congratulations 🎉 !! \" +\n                        \"You received your final yield !!\",\n                });\n            })\n            .catch((error) => {\n                setClaimingYield(false);\n                setErrorModal({\n                    open: true,\n                    msg: error.message,\n                });\n            });\n    }\n\n    const fetchContractData = async () => {\n        try {\n            let result;\n            if (!contractInstance) {\n                result = await createContractInstance();\n            }\n\n            contractInstance = contractInstance ? contractInstance : result.contract;\n            bep20Instance = bep20Instance ? bep20Instance : result.bep20;\n\n            if (contractInstance) {\n                const isParticipant = await contractInstance\n                    .methods.isParticipant(window.userAddress).call();\n\n                const alreadyTakenLoan = await contractInstance\n                    .methods.takenLoan(window.userAddress).call();\n\n                const totalParticipants = await contractInstance\n                    .methods.totalParticipants().call();\n\n                const auctionCount = await contractInstance\n                    .methods.getAuctionCount().call();\n\n                const highestBidAmount = await contractInstance\n                    .methods.highestBidAmount(auctionCount).call();\n\n                const poolCloseTimestamp = await contractInstance\n                    .methods.poolCloseTimestamp().call();\n\n                let autionStartTimestamp, autionCloseTimestamp;\n                if (Number(totalParticipants) > 1) {\n                    autionStartTimestamp = await contractInstance\n                        .methods.nextAutionStartTimestamp().call();\n\n                    autionCloseTimestamp = await contractInstance\n                        .methods.nextAutionCloseTimestamp().call();\n                }\n\n                let isLoanWinner = false, winnerInAuction = 0;\n                if (Number(auctionCount) > 0) {\n                    const loanStatus = await contractInstance\n                        .methods.checkWinnerStatus(window.userAddress).call();\n\n                    winnerInAuction = loanStatus[1];\n\n                    if (winnerInAuction < auctionCount ||\n                        (Number(auctionCount) === Number(totalParticipants) - 1 &&\n                            time.currentUnixTime() > Number(autionCloseTimestamp))\n                    ) {\n                        isLoanWinner = loanStatus[0];\n                    }\n                }\n\n                let loanAmount;\n                if (isLoanWinner || alreadyTakenLoan) {\n                    loanAmount = await contractInstance\n                        .methods.loanAmount(window.userAddress).call();\n                }\n\n                let claimedFinalYield;\n                if (time.currentUnixTime() >= Number(poolCloseTimestamp)) {\n                    claimedFinalYield = await contractInstance\n                        .methods.claimedFinalYield(window.userAddress).call();\n                }\n\n                let bep20Balance = await precision.remove(await bep20Instance\n                    .methods.balanceOf(window.userAddress).call(), 18);\n\n                const minBidAmount = Number(await contractInstance\n                    .methods.minimumBidAmount().call());\n\n                const depositAmount = Number(await contractInstance\n                    .methods.depositAmount().call());\n\n                const auctionInterval = Number(await contractInstance\n                    .methods.auctionInterval().call())\n\n                const poolStartTimestamp = Number(await contractInstance\n                    .methods.poolStartTimestamp().call());\n\n                const maxParticipants = Number(await contractInstance\n                    .methods.maxParticipants().call());\n\n                const maxBidAmount = depositAmount / maxParticipants;\n\n                setState({\n                    isParticipant,\n                    alreadyTakenLoan,\n                    loanAmount,\n                    totalParticipants,\n                    auctionCount,\n                    autionStartTimestamp,\n                    autionCloseTimestamp,\n                    highestBidAmount,\n                    isLoanWinner,\n                    winnerInAuction,\n                    poolCloseTimestamp,\n                    bep20Balance,\n                    maxBidAmount,\n                    claimedFinalYield,\n                    minBidAmount,\n                    depositAmount,\n                    auctionInterval,\n                    createdAt: poolStartTimestamp,\n                });\n                setShowParticipate(false);\n                setShowBid(false);\n\n                setLoading(false);\n            }\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    };\n\n    const createContractInstance = () => {\n        return new Promise((resolve, reject) => {\n            try {\n                const contract = new window.web3.eth.Contract(\n                    poolAbi.default,\n                    poolAddress,\n                    { from: window.userAddress }\n                );\n\n                const bep20 = new window.web3.eth.Contract(\n                    bep20Abi.default,\n                    BUSD,\n                    { from: window.userAddress }\n                );\n\n                setBep20Instance(bep20);\n                setContractInstance(contract);\n                resolve({ contract, bep20 });\n            } catch (error) {\n                reject(error);\n            }\n        });\n    };\n\n    const getTokenSymbol = () => {\n        return \"BUSD\";\n    }\n\n    useEffect(() => {\n        if (typeof window.ethereum === 'undefined' ||\n            !window.ethereum.isConnected() ||\n            !window.ethereum.selectedAddress\n        ) {\n            setLoading(false);\n            setShowMetamaskError(true);\n        }\n\n        if (typeof window.ethereum !== 'undefined' &&\n            window.ethereum.selectedAddress &&\n            window.ethereum.isConnected() &&\n            !state.isParticipant\n        ) {\n            fetchContractData();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (loading) {\n        routes = <Loading />;\n    } else {\n        routes = (\n            <div>\n                {showMetamaskError ?\n                    <AlertModal\n                        open={showMetamaskError}\n                        toggle={() => {\n                            setShowMetamaskError(false);\n                            history.push('/');\n                        }}\n                    >\n                        <div>\n                            {typeof window.ethereum === 'undefined' ?\n                                <div>\n                                    You can't use these features without Metamask.\n                                <br />\n                                Please install\n                                <Image width=\"50px\" src={metamask}></Image>\n                                first !!\n                            </div>\n                                :\n                                <div>\n                                    Please connect to\n                                <Image width=\"50px\" src={metamask}></Image>\n                                to use this feature !!\n                            </div>\n                            }\n                        </div>\n                    </AlertModal>\n                    :\n                    <CardDeck>\n                        <Card className=\"hidden-card\"></Card>\n\n                        <Card className=\"mx-auto view-pool-card\">\n                            <Card.Body style={{ textAlign: \"left\", fontWeight: \"bold\" }}>\n                                <p className=\"view-pool-header\">\n                                    <u>Venus Chit Fund Pool</u>\n                                </p>\n\n                                <Row style={{ paddingBottom: \"20px\" }}>\n                                    <Col>\n                                        <u>Total Participants</u>\n                                        <span> :</span>\n                                        <span className=\"float-right\">\n                                            {state.totalParticipants}\n                                        </span>\n                                    </Col>\n\n                                    <Col>\n                                        <u>Lending Pool</u>\n                                        <span> :</span>\n                                        <span className=\"float-right\">\n                                            Venus\n                                        </span>\n                                    </Col>\n                                </Row>\n\n                                <Row style={{ paddingBottom: \"20px\" }}>\n                                    <Col>\n                                        <u>Auction Done</u>\n                                        <span> :</span>\n                                        <span className=\"float-right\">\n                                            {state.totalParticipants > 1 ? (\n                                                time.currentUnixTime() > state.autionStartTimestamp +\n                                                    (state.auctionInterval * 3600) ?\n                                                    state.auctionCount :\n                                                    0\n                                                )\n                                                : 0\n                                            }\n                                        </span>\n                                    </Col>\n\n                                    <Col>\n                                        <u>Deposit Amount</u>\n                                        <span> :</span>\n                                        <span className=\"float-right\">\n                                            <span>{state.depositAmount} {getTokenSymbol()}</span>\n                                        </span>\n                                    </Col>\n                                </Row>\n\n                                <Row style={{ paddingBottom: \"20px\" }}>\n                                    <Col>\n                                        <u>Max Bid Amount</u>\n                                        <span> : </span>\n                                        <span className=\"float-right\">\n                                            <span>{state.maxBidAmount} {getTokenSymbol()}</span>\n                                        </span>\n                                    </Col>\n\n                                    <Col>\n                                        <u>Min Bid Amount</u>\n                                        <span> : </span>\n                                        <span className=\"float-right\">\n                                            <span>{state.minBidAmount} {getTokenSymbol()}</span>\n                                        </span>\n                                    </Col>\n                                </Row>\n\n                                {state.totalParticipants > 1 &&\n                                    Number(state.autionCloseTimestamp) > time.currentUnixTime() ?\n                                    <div>\n                                        {time.currentUnixTime() < state.autionStartTimestamp ?\n                                            <Row className=\"text-center\" style={{ paddingBottom: \"20px\" }}>\n                                                <Col>\n                                                    <u>Next Auction Start</u>\n                                                    <span> : </span>\n                                                    <span>\n                                                        {time.getRemaingTime(state.autionStartTimestamp)}\n                                                    </span>\n                                                </Col>\n                                            </Row>\n                                            :\n                                            <div style={{ marginTop: \"10px\" }}>\n                                                <div className=\"auction-message\">\n                                                    Auction Going On\n                                                </div>\n                                                <Row className=\"text-center\" style={{ paddingBottom: \"20px\" }}>\n                                                    <Col>\n                                                        <u>Highest Bid Amount</u>\n                                                        <span> : </span>\n                                                        <span>\n                                                            {state.highestBidAmount} {getTokenSymbol()}\n                                                        </span>\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        }\n\n                                        <Row className=\"text-center\">\n                                            <Col>\n                                                <u>Auction Close In</u>\n                                                <span> : </span>\n                                                <span>\n                                                    {time.getRemaingTime(state.autionCloseTimestamp)}\n                                                </span>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    : (state.totalParticipants > 1 ?\n                                        (\n                                            Number(state.poolCloseTimestamp) < time.currentUnixTime() ?\n                                                <div className=\"auction-alert-message\">\n                                                    Pool Already Closed\n                                                </div>\n                                                :\n                                                <Row className=\"text-center\">\n                                                    <Col>\n                                                        <u>Pool Closing In</u>\n                                                        <span> : </span>\n                                                        <span>\n                                                            {time.getRemaingTime(state.poolCloseTimestamp)}\n                                                        </span>\n                                                    </Col>\n                                                </Row>\n                                        )\n                                        : null\n                                    )\n                                }\n\n                                {showBid ?\n                                    <Bid\n                                        contractInstance={contractInstance}\n                                        totalAmount={state.depositAmount}\n                                        token={getTokenSymbol()}\n                                        callback={fetchContractData}\n                                    />\n                                    : null}\n\n                                {showParticipate ?\n                                    (Number(state.bep20Balance) >= state.depositAmount ?\n                                        <Participate\n                                            poolAddress={poolAddress}\n                                            contractInstance={contractInstance}\n                                            bep20Instance={bep20Instance}\n                                            buyToken={getTokenSymbol()}\n                                            availableBalance={state.bep20Balance}\n                                            balanaceNeeded={state.depositAmount}\n                                            callback={fetchContractData}\n                                        />\n                                        : null\n                                    )\n                                    : null}\n                            </Card.Body>\n\n                            {state.isParticipant ?\n                                (time.currentUnixTime() >= Number(state.poolCloseTimestamp) ?\n                                    (!state.claimedFinalYield ?\n                                        <Card.Footer className=\"view-pool-footer\">\n                                            <Button\n                                                onClick={handleClaimFinalYield}\n                                                variant=\"success\"\n                                            >\n                                                {claimingYield ?\n                                                    <div className=\"d-flex align-items-center\">\n                                                        Processing\n                                                    <span className=\"loading ml-2\"></span>\n                                                    </div>\n                                                    :\n                                                    <div>Claim Final Yield</div>\n                                                }\n                                            </Button>\n                                        </Card.Footer>\n                                        :\n                                        <div className=\"info-message\">\n                                            Thank you for your participation in the pool.<br />\n                                            You have already claimed your Final yield. <br />\n                                            Hope to see you on other pools\n                                            <span role=\"img\" aria-label=\"smile-emoji\"> 🙂</span>\n                                        </div>\n                                    ) : (state.alreadyTakenLoan ?\n                                        <div className=\"info-message\">\n                                            Congratulations\n                                            <span role=\"img\" aria-label=\"congratualation-emoji\"> 🎉</span><br />\n                                            You have already won a Loan of amount {state.loanAmount} {getTokenSymbol()}<br />\n                                            Now, You can't take part in bidding process.\n                                        </div>\n                                        : (!state.isLoanWinner &&\n                                            time.currentUnixTime() > Number(state.autionStartTimestamp) &&\n                                            time.currentUnixTime() < Number(state.autionCloseTimestamp) ?\n                                            <div>\n                                                {state.userCurrentBid > 0 && !showBid ?\n                                                    <div className=\"info-message\">\n                                                        You have successfully placed your bid\n                                                    for this auction.<br />\n                                                        <span>\n                                                            Your bid is {state.userCurrentBid} {getTokenSymbol()}<br />\n                                                        </span>\n                                                    </div>\n                                                    : null\n                                                }\n\n                                                <Card.Footer className=\"view-pool-footer\">\n                                                    <Button\n                                                        onClick={() => setShowBid(true)}\n                                                        variant=\"warning\"\n                                                    >\n                                                        {state.userCurrentBid > 0 ?\n                                                            <div>Want to Bid Higher ?</div>\n                                                            :\n                                                            <div>Want to Bid ?</div>\n                                                        }\n                                                    </Button>\n                                                </Card.Footer>\n                                            </div>\n\n                                            : (state.isLoanWinner ?\n                                                <div>\n                                                    <div className=\"info-message\">\n                                                        You have successfully won the bid in auction {state.winnerInAuction}\n                                                        <br />click below button to claim your loan of\n                                                            <span> {state.loanAmount} {getTokenSymbol()}.</span>\n                                                    </div>\n                                                    <Card.Footer className=\"view-pool-footer\">\n                                                        <Button\n                                                            onClick={handleClaimLoan}\n                                                            variant=\"success\"\n                                                        >\n                                                            {claimingLoan ?\n                                                                <div className=\"d-flex align-items-center\">\n                                                                    Processing\n                                                                    <span className=\"loading ml-2\"></span>\n                                                                </div>\n                                                                :\n                                                                <div>Claim Your Loan</div>\n                                                            }\n                                                        </Button>\n                                                    </Card.Footer>\n                                                </div>\n                                                :\n                                                <div className=\"info-message\">\n                                                    Thank you for your participation in the pool.<br />\n                                                    {state.totalParticipants <= 1 ?\n                                                        <div>\n                                                            The bid will start once at least\n                                                            one more person join the pool.\n                                                        </div>\n                                                        :\n                                                        <div>\n                                                            Please wait till next auction.\n                                                        </div>\n                                                    }\n                                                </div>\n                                            )\n                                        )\n                                    )\n                                ) : (time.currentUnixTime() < (state.createdAt + state.auctionInterval * 3600) ?\n                                    <Card.Footer className=\"view-pool-footer\">\n                                        <Button\n                                            onClick={() => setShowParticipate(true)}\n                                            variant=\"success\"\n                                        >\n                                            Want to Participate ?\n                                    </Button>\n                                    </Card.Footer>\n                                    :\n                                    <div className=\"alert-message\">\n                                        Participation time already over.<br />\n                                        Please check other Pools.\n                                    </div>\n                                )\n                            }\n                        </Card>\n\n                        <Card className=\"hidden-card\"></Card>\n                    </CardDeck>\n                }\n\n                <AlertModal\n                    open={errorModal.open}\n                    toggle={() => setErrorModal({\n                        ...errorModal, open: false\n                    })}\n                >\n                    {errorModal.msg}\n                </AlertModal>\n\n                <SuccessModal\n                    open={successModal.open}\n                    toggle={() => setSuccessModal({\n                        ...successModal, open: false\n                    })}\n                >\n                    {successModal.msg}\n                </SuccessModal>\n            </div >\n        );\n    }\n\n    return routes;\n}\n","import React, { useEffect, useState } from \"react\";\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport metamask from \"../../assets/metamask.png\";\nimport history from \"../Utils/history\";\nimport {\n    Row,\n    Col,\n    Form,\n    Card,\n    Image,\n    Button,\n    CardDeck,\n    Dropdown,\n    DropdownButton,\n} from \"react-bootstrap\";\n\nexport default function CreatePool() {\n    const [processing, setProcessing] = useState(false);\n    const [addPoolState, setAddPoolState] = useState({\n        maximumBidAmount: \"\",\n        minimumBidAmount: \"\",\n        auctionInterval: \"\",\n        auctionDuration: \"\",\n        maxParticipants: \"\",\n        token: \"0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47\",\n    });\n\n    const [showMetamaskError, setShowMetamaskError] = useState(\n        false\n    );\n\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const [lendingPool] = useState([\n        { pool: \"Venus (BUSD)\", token: \"0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47\" },\n    ]);\n\n    const handleCreatePool = () => {\n        window.poolFactory.methods\n            .addPool(\n                addPoolState.maximumBidAmount,\n                addPoolState.minimumBidAmount,\n                addPoolState.auctionInterval,\n                addPoolState.auctionDuration,\n                addPoolState.maxParticipants,\n                addPoolState.token,\n            )\n            .send()\n            .on('transactionHash', () => {\n                setProcessing(true);\n            })\n            .on('receipt', (_) => {\n                setProcessing(false);\n                setSuccessModal({\n                    open: true,\n                    msg: \"Congratulations 🎉 !! \" +\n                        \"Pool successfully created !! \" +\n                        \"Within 2 minutes you will be able to \" +\n                        \"see created pool on the dashboard.\",\n                });\n            })\n            .catch((error) => {\n                setProcessing(false);\n                setErrorModal({\n                    open: true,\n                    msg: error.message,\n                });\n                console.log(error.message)\n            });\n    };\n\n    useEffect(() => {\n        if (typeof window.ethereum === 'undefined' ||\n            !window.ethereum.selectedAddress\n        ) {\n            setShowMetamaskError(true);\n        }\n    }, []);\n\n    return (\n        <div>\n            {showMetamaskError ?\n                <AlertModal\n                    open={showMetamaskError}\n                    toggle={() => {\n                        setShowMetamaskError(false);\n                        history.push('/');\n                    }}\n                >\n                    <div>\n                        {typeof window.ethereum === 'undefined' ?\n                            <div>\n                                You can't use these features without Metamask.\n                                <br />\n                                Please install\n                                <Image width=\"50px\" src={metamask}></Image>\n                                first !!\n                            </div>\n                            :\n                            <div>\n                                Please connect to\n                                <Image width=\"50px\" src={metamask}></Image>\n                                to use this feature !!\n                            </div>\n                        }\n                    </div>\n                </AlertModal>\n                :\n                <CardDeck>\n                    <Card className=\"hidden-card\"></Card>\n\n                    <Card className=\"mx-auto form-card\">\n                        <Card.Header>\n                            <u>Create Chit Fund Pool</u>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <Row style={{ marginTop: \"10px\" }}>\n                                <Col className=\"text-header\">\n                                    Deposit Amount:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        placeholder=\"(Max Bid Amount * Max Participants)\"\n                                        style={{ width: \"80%\" }}\n                                        value={\n                                            (addPoolState.maximumBidAmount *\n                                                (addPoolState.maxParticipants > 0 ?\n                                                    addPoolState.maxParticipants : 1\n                                                ) > 0 ?\n                                                addPoolState.maximumBidAmount *\n                                                (addPoolState.maxParticipants > 0 ?\n                                                    addPoolState.maxParticipants : 1\n                                                )\n                                                : \"\"\n                                            )\n                                        }\n                                        disabled={true}\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Maximum Bid Amount:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        step=\"0\"\n                                        placeholder=\"No decimal places\"\n                                        onChange={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            maximumBidAmount: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addPoolState.maximumBidAmount}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Maximum Participants:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        step=\"0\"\n                                        placeholder=\"No decimal places\"\n                                        onChange={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            maxParticipants: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addPoolState.maxParticipants}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Minimum Bid Amount:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        step=\"0\"\n                                        placeholder=\"No decimal places\"\n                                        onChange={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            minimumBidAmount: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addPoolState.minimumBidAmount}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Every Auction Interval:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        step=\"0\"\n                                        placeholder=\"In hours (Eg. 1)\"\n                                        onChange={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            auctionInterval: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addPoolState.auctionInterval}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Aution Duration:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        min=\"0\"\n                                        max={addPoolState.auctionInterval - 1}\n                                        step=\"0\"\n                                        placeholder=\"10 (For 10 hours)\"\n                                        onChange={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            auctionDuration: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addPoolState.auctionDuration}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row style={{ marginBottom: \"20px\" }}>\n                                <Col className=\"text-header\">\n                                    Lending Pool:\n                            </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <DropdownButton\n                                        style={{\n                                            position: \"absolute\",\n                                        }}\n                                        title={lendingPool.map((element) => (\n                                            addPoolState.token === element.token ?\n                                                element.pool\n                                                : null\n                                        ))}\n                                        variant=\"outline-info\"\n                                        onSelect={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            token: e\n                                        })}\n                                    >\n                                        {lendingPool.map((element, key) => (\n                                            <Dropdown.Item\n                                                key={key}\n                                                eventKey={element.token}\n                                            >\n                                                {element.pool}\n                                            </Dropdown.Item>\n                                        ))}\n                                    </DropdownButton>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n\n                        <Card.Footer className=\"text-center\">\n                            <Button\n                                onClick={handleCreatePool}\n                                variant=\"success\"\n                            >\n                                {processing ?\n                                    <div className=\"d-flex align-items-center\">\n                                        Processing\n                                <span className=\"loading ml-2\"></span>\n                                    </div>\n                                    :\n                                    <div>Submit</div>\n                                }\n                            </Button>\n                        </Card.Footer>\n                    </Card>\n\n                    <Card className=\"hidden-card\"></Card>\n                </CardDeck>\n            }\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={() => history.push(\"/\")}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Card, CardDeck, Image } from \"react-bootstrap\";\nimport bscLogo from \"../../assets/bsc.svg\";\nimport { time } from \"../../utils/time\";\nimport Loading from \"../Utils/Loading\";\n\nexport default function HomePage() {\n    const [loading, setLoading] = useState(true);\n    const [loanPools, setlLoanPools] = useState([]);\n    const [noMetamsk, setNoMetamask] = useState(false);\n\n    const createSubArray = (pools) => {\n        let chunks = [];\n\n        while (pools.length > 4) {\n            chunks.push(pools.splice(0, 4));\n        }\n\n        if (pools.length > 0) {\n            chunks.push(pools);\n        }\n\n        setlLoanPools(chunks);\n        setLoading(false);\n    }\n\n    const isMetamaskInstalled = () => {\n        return (typeof window.ethereum !== 'undefined');\n    };\n\n    const getPools = async () => {\n        const poolCount = await window.poolFactory\n            .methods\n            .totalPools().call();\n\n        if (Number(poolCount) === 0) {\n            setLoading(false);\n        }\n\n        let pools = [];\n        for (let i = 0; i < poolCount; i++) {\n            const poolAddress = await window.poolFactory\n                .methods\n                .availablePools(i).call();\n\n            const poolInfo = await window.poolFactory\n                .methods\n                .poolInfo(poolAddress).call();\n\n            poolInfo.poolAddress = poolAddress;\n\n            pools.push(poolInfo);\n\n            if (i === poolCount - 1) {\n                createSubArray(pools);\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (!isMetamaskInstalled()) {\n            setLoading(false);\n            setNoMetamask(true);\n        } else if (loanPools.length === 0) {\n            getPools();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    function DisplayCard({ pool, count }) {\n        return (\n            <Card key={count} className=\"display-pool-card\" >\n                <Link\n                    key={count}\n                    style={{ textDecoration: \"none\", color: \"black\" }}\n                    to={`/view/${pool.poolAddress}`}\n                >\n                    <Card.Header style={{ marginBottom: \"5px\" }}>\n                        <Image\n                            src={bscLogo} width=\"40px\"\n                            style={{ marginRight: \"5px\" }}\n                        ></Image>\n                        <span> Chit Fund Pool</span>\n                    </Card.Header>\n\n                    <Card.Body>\n                        <div style={{ marginBottom: \"10px\" }}>\n                            Deposit Amount: {pool.depositAmount} BUSD\n                        </div>\n\n                        <div style={{ marginBottom: \"10px\" }}>\n                            Maximum Participants: {pool.maxParticipants}\n                        </div>\n\n                        <div style={{ marginBottom: \"10px\" }}>\n                            Minimum Bid Amount: {pool.minimumBidAmount} BUSD\n                        </div>\n\n                        <div style={{ marginBottom: \"10px\" }}>\n                            Auction Interval: Every {pool.auctionInterval} hours\n                        </div>\n                        <div style={{ marginBottom: \"5px\" }}>\n                            {time.currentUnixTime() < (\n                                Number(pool.createdAt) +\n                                Number(pool.auctionInterval) *\n                                3600\n                            ) ?\n                                <span className=\"info-message\">\n                                    {time.getTimeInString(\n                                        Number(pool.createdAt) +\n                                        Number(pool.auctionInterval) *\n                                        3600\n                                    )}\n                                </span>\n                                :\n                                <span className=\"warning-message\">\n                                    Participation Already Over\n                                </span>\n                            }\n                        </div>\n                    </Card.Body>\n                </Link>\n            </Card>\n        );\n    }\n\n    if (loading) {\n        return <Loading />\n    };\n\n    return (\n        <div>\n            {!noMetamsk ?\n                (loanPools.map((element, key) => (\n                    element.length === 4 ?\n                        <CardDeck key={key} style={{ margin: \"2%\" }}>\n                            {element.map((pool, k) => (\n                                <DisplayCard key={k} pool={pool} count={k} />\n                            ))}\n                        </CardDeck>\n                        :\n                        <CardDeck key={key} style={{ margin: \"2%\" }}>\n                            {element.map((pool, k) => (\n                                <DisplayCard key={k} pool={pool} count={k} />\n                            ))}\n\n                            {[...Array(4 - element.length)].map((x, i) =>\n                                <Card\n                                    key={element.length + i + 1}\n                                    className=\"hidden-card\"\n                                >\n                                </Card>\n                            )}\n                        </CardDeck>\n                )))\n                : <div\n                    className=\"alert-message\"\n                    style={{ marginTop: \"20%\", fontSize: \"x-large\" }}\n                >\n                    You don't have metamask. Please install first !!\n                </div>\n            }\n        </div >\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../Utils/Loading\";\nimport history from \"../Utils/history\";\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport metamask from \"../../assets/metamask.png\";\nimport { Button, Card, CardDeck, Image } from \"react-bootstrap\";\n\nexport default function TokenFaucet() {\n    const [loading, setLoading] = useState(true);\n    const [processing, setProcessing] = useState(false);\n\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [showMetamaskError, setShowMetamaskError] = useState(\n        false\n    );\n    const [tokens] = useState([\n        {\n            name: \"BUSD\",\n            address: \"0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47\",\n            status: false\n        }\n    ]);\n\n    const handleGetTestTokens = () => {\n        window.tokenFaucet.methods\n            .claimTestTokens()\n            .send()\n            .on('transactionHash', () => {\n                setProcessing(true);\n            })\n            .on('receipt', (_) => {\n                setProcessing(false);\n            })\n            .catch((error) => {\n                setProcessing(false);\n                setErrorModal({\n                    open: true,\n                    msg: error.message,\n                });\n            });\n    }\n\n    const checkIsAlreadyClaimed = () => {\n        tokens.forEach(async (_, i) => {\n            const status = await window.tokenFaucet\n                .methods.isAlreadyClaimed(\n                    window.userAddress,\n                ).call();\n\n            tokens[i].status = status;\n\n            if (i === tokens.length - 1) {\n                setLoading(false);\n            }\n        });\n    }\n\n    useEffect(() => {\n        if (typeof window.ethereum === 'undefined' ||\n            !window.ethereum.selectedAddress\n        ) {\n            setLoading(false);\n            setShowMetamaskError(true);\n        } else {\n            checkIsAlreadyClaimed();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (loading) {\n        return <Loading />\n    };\n\n    return (\n        <div style={{ marginTop: \"7%\" }}>\n            {showMetamaskError ?\n                <AlertModal\n                    open={showMetamaskError}\n                    toggle={() => {\n                        setShowMetamaskError(false);\n                        history.push('/');\n                    }}\n                >\n                    <div>\n                        {typeof window.ethereum === 'undefined' ?\n                            <div>\n                                You can't use these features without Metamask.\n                                <br />\n                                Please install\n                                <Image width=\"50px\" src={metamask}></Image>\n                                first !!\n                            </div>\n                            :\n                            <div>\n                                Please connect to\n                                <Image width=\"50px\" src={metamask}></Image>\n                                to use this feature !!\n                            </div>\n                        }\n                    </div>\n                </AlertModal>\n                :\n                <CardDeck>\n                    <Card className=\"hidden-card\"></Card>\n\n                    <Card className=\"view-pool-card\">\n                        <Card.Header>\n                            <u>Token Faucet</u>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <div style={{ marginBottom: \"30px\" }}>\n                                <strong>Don't have Binance Smart Chain (BNB) Token ?</strong>\n                                <br />Please use <a\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                    href=\"https://testnet.binance.org/faucet-smart\"\n                                    style={{ fontWeight: \"bold\", lineHeight: \"40px\" }}\n                                > BSC Testnet Faucet </a>\n                            to get some token on {window.userAddress}\n                            </div>\n\n                            {tokens.map((token, key) => (\n                                <Card\n                                    key={key}\n                                    className=\"mx-auto form-card text-center\"\n                                    style={{\n                                        backgroundColor: \"rgb(253, 255, 255)\",\n                                        marginTop: \"4%\",\n                                        marginBottom: \"4%\"\n                                    }}\n                                >\n                                    <Card.Header>\n                                        <u>{token.name} Faucet</u>\n                                    </Card.Header>\n\n                                    {!token.status ?\n                                        <Card.Body>\n                                            <p>\n                                                You can get 100 Test Venus <strong>{token.name} </strong>\n                                            (one time) by clicking below button:\n                                            <br />\n                                            </p>\n\n                                            <Button\n                                                style={{ marginTop: '10px' }}\n                                                variant=\"success\"\n                                                onClick={() => handleGetTestTokens()}\n                                            >\n                                                {processing ?\n                                                    <div className=\"d-flex align-items-center\">\n                                                        Processing\n                                                <span className=\"loading ml-2\"></span>\n                                                    </div>\n                                                    :\n                                                    <div>\n                                                        GET 100 {token.name}\n                                                    </div>\n                                                }\n                                            </Button>\n                                        </Card.Body>\n\n                                        :\n                                        <Card.Body>\n                                            <p style={{ color: \"gray\" }}>\n                                                You have already claimed your 100 {token.name}.\n                                        </p>\n                                            <p style={{ marginTop: \"30px\", fontWeight: \"bold\" }}>\n                                                Maybe you need to use a different account?\n                                        </p>\n                                        </Card.Body>\n                                    }\n                                </Card>\n                            ))}\n                        </Card.Body>\n                    </Card>\n\n                    <Card className=\"hidden-card\"></Card>\n                </CardDeck>\n            }\n\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div >\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n    Switch,\n    HashRouter,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport history from './components/Utils/history';\nimport Header from './components/Header';\nimport ViewPool from './components/ViewPool';\nimport CreatePool from './components/CreatePool';\nimport HomePage from './components/HomePage';\nimport TokenFaucet from './components/TokenFaucet';\n\nexport default function App() {\n    const routes = (\n        <Switch>\n            <Route path=\"/\" exact>\n                <HomePage />\n            </Route>\n            <Route path=\"/home\" exact>\n                <ViewPool />\n            </Route>\n            <Route path=\"/create-pool\" exact>\n                <CreatePool />\n            </Route>\n            <Route path=\"/view/:poolAddress\" exact>\n                <ViewPool />\n            </Route>\n            <Route path=\"/token-faucet\" exact>\n                <TokenFaucet />\n            </Route>\n            <Redirect to=\"/\" />\n        </Switch>\n    );\n\n    return (\n        <div className=\"App\">\n            <HashRouter history={history}>\n                <Header />\n                {routes}\n            </HashRouter>\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { initContract } from './utils/init';\n\nif (\n    typeof window.ethereum !== 'undefined' &&\n    window.ethereum.selectedAddress &&\n    window.ethereum.isConnected()\n) {\n    initContract()\n        .then(() => {\n            ReactDOM.render(\n                <App />,\n                document.querySelector('#root')\n            )\n        })\n        .catch(console.error);\n} else if (typeof window.ethereum !== 'undefined') {\n    initContract()\n        .then(() => {\n            ReactDOM.render(\n                <App />,\n                document.querySelector('#root')\n            )\n        });\n} else {\n    ReactDOM.render(\n        <App />,\n        document.querySelector('#root')\n    )\n}\n"],"sourceRoot":""}